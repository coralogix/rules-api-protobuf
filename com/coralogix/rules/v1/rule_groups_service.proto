syntax = "proto3";

package com.coralogix.rules.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";
import "com/coralogix/rules/v1/rule.proto";
import "com/coralogix/rules/v1/rule_group.proto";
import "com/coralogix/rules/v1/rule_matcher.proto";
import "google/protobuf/descriptor.proto";
import "google/api/annotations.proto";
import "com/coralogix/openapi/v1/annotations.proto";

message AuditLogDescription {
  optional string description = 1;
}

extend google.protobuf.MethodOptions {
  AuditLogDescription audit_log_description = 5000;
}

service RuleGroupsService {
  option (com.coralogix.openapi.v1.service) = {
    description: "API to define, query, and manage your rules"
    resource_name: "RuleGroup",
    version: "v1"
  };
  rpc GetRuleGroup(GetRuleGroupRequest) returns (GetRuleGroupResponse) {
    option (audit_log_description).description = "get rule group";
    option (google.api.http) = {
      get: "/api/v1/rulegroups/{group_id}"

      additional_bindings: {
        get: "/v1/rulegroups/{group_id}"
        response_body: "rule_group"
      }
    };
    option (com.coralogix.openapi.v1.method) = {
      http_rule_index: 1
      resource: true
      description: "Gets rule group by groupid"
      response_body_example: "{\"id\":\"a2ddf5dd-f77f-4bea-b782-4068c510e15d\",\"name\":\"mysql-extractrule\",\"description\":\"mysql-cloudwatch audit logs  parser\",\"creator\":\"bot@coralogix.com\",\"enabled\":true,\"hidden\":false,\"rule_matchers\":[{\"subsystem_name\":{\"value\":\"mysql-cloudwatch\"}}],\"rule_subgroups\":[{\"id\":\"2df585fe-be27-4062-aa42-e740193bfc75\",\"rules\":[{\"id\":\"bd585f17-278a-4908-b05b-54fd6bf693be\",\"name\":\"mysql-parse\",\"description\":\"mysql-parse\",\"source_field\":\"text\",\"parameters\":{\"parse_parameters\":{\"destination_field\":\"text\",\"rule\":\"(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)\"}},\"enabled\":true,\"order\":1}],\"enabled\":true,\"order\":1}],\"order\":5}"
    };
  }
  rpc ListRuleGroups(ListRuleGroupsRequest) returns (ListRuleGroupsResponse) {
    option (audit_log_description).description = "get all rule groups";
    option (google.api.http) = {
      get: "/api/v1/rulegroups"
    };
    option (com.coralogix.openapi.v1.method) = {
      datasource: true
      description: "Gets all rule groups"
      response_body_example: "{\"rule_groups\":[{\"id\":\"a2ddf5dd-f77f-4bea-b782-4068c510e15d\",\"name\":\"mysql-extractrule\",\"description\":\"mysql-cloudwatch audit logs  parser\",\"creator\":\"bot@coralogix.com\",\"enabled\":true,\"hidden\":false,\"rule_matchers\":[{\"subsystem_name\":{\"value\":\"mysql-cloudwatch\"}}],\"rule_subgroups\":[{\"id\":\"2df585fe-be27-4062-aa42-e740193bfc75\",\"rules\":[{\"id\":\"bd585f17-278a-4908-b05b-54fd6bf693be\",\"name\":\"mysql-parse\",\"description\":\"mysql-parse\",\"source_field\":\"text\",\"parameters\":{\"parse_parameters\":{\"destination_field\":\"text\",\"rule\":\"(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)\"}},\"enabled\":true,\"order\":1}],\"enabled\":true,\"order\":1}],\"order\":5}]}"

    };
  }
  rpc CreateRuleGroup(CreateRuleGroupRequest) returns (CreateRuleGroupResponse) {
    option (audit_log_description).description = "create rule group";
    option (google.api.http) = {
      post: "/api/v1/rulegroups/"
      body: "*"

      additional_bindings: {
        post: "/v1/rulegroups"
        body: "*"
        response_body: "rule_group"
      }
    };
    option (com.coralogix.openapi.v1.method) = {
      http_rule_index: 1
      resource: true
      description: "Creates rule group"
      extensions: [
        {key: "x-codegen-request-body-name" value: "\"RuleGroupPrototype\""}
      ]
      request_body_example: "{\"name\":\"mysql-extractrule\",\"description\":\"mysql-cloudwatch audit logs  parser\",\"creator\":\"bot@coralogix.com\",\"enabled\":true,\"hidden\":false,\"rule_matchers\":[{\"subsystem_name\":{\"value\":\"mysql-cloudwatch\"}}],\"rule_subgroups\":[{\"rules\":[{\"name\":\"mysql-parse\",\"description\":\"mysql-parse\",\"source_field\":\"text\",\"parameters\":{\"parse_parameters\":{\"destination_field\":\"text\",\"rule\":\"(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)\"}},\"enabled\":true,\"order\":1}],\"enabled\":true,\"order\":1}],\"order\":39}"
      response_body_example: "{\"id\":\"dae394d9-027a-4f95-a441-c7f3d4ea857d\",\"name\":\"mysql-extractrule\",\"description\":\"mysql-cloudwatch audit logs  parser\",\"creator\":\"bot@coralogix.com\",\"enabled\":true,\"hidden\":false,\"rule_matchers\":[{\"subsystem_name\":{\"value\":\"mysql-cloudwatch\"}}],\"rule_subgroups\":[{\"id\":\"7a4770de-b2db-4e68-a891-68a43e9fea3c\",\"rules\":[{\"id\":\"d032de36-1dd2-410d-a992-fc150337df83\",\"name\":\"mysql-parse\",\"description\":\"mysql-parse\",\"source_field\":\"text\",\"parameters\":{\"parse_parameters\":{\"destination_field\":\"text\",\"rule\":\"(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)\"}},\"enabled\":true,\"order\":1}],\"enabled\":true,\"order\":1}],\"order\":39}"
    };
  }
  rpc UpdateRuleGroup(UpdateRuleGroupRequest) returns (UpdateRuleGroupResponse) {
    option (audit_log_description).description = "update rule group";
    option (google.api.http) = {
      put: "/api/v1/rulegroups/{group_id}"
      body: "rule_group"

      additional_bindings: {
        put: "/v1/rulegroups/{group_id}"
        body: "rule_group"
        response_body: "rule_group"
      }
    };
    option (com.coralogix.openapi.v1.method) = {
      http_rule_index: 1
      resource: true
      description: "Updates rule group by groupid"
      extensions: [
        {key: "x-codegen-request-body-name" value: "\"RuleGroupPrototype\""}
      ]
      request_body_example: "{\"name\":\"mysql-extractrule\",\"description\":\"mysql-cloudwatch audit logs parser\",\"creator\":\"bot@coralogix.com\",\"enabled\":true,\"hidden\":false,\"rule_matchers\":[{\"subsystem_name\":{\"value\":\"mysql-cloudwatch\"}}],\"rule_subgroups\":[{\"rules\":[{\"name\":\"mysql-parse\",\"description\":\"mysql-parse\",\"source_field\":\"text\",\"parameters\":{\"parse_parameters\":{\"destination_field\":\"text\",\"rule\":\"(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)\"}},\"enabled\":true,\"order\":1}],\"enabled\":true,\"order\":1}],\"order\":39}"
      response_body_example: "{\"id\":\"dae394d9-027a-4f95-a441-c7f3d4ea857d\",\"name\":\"mysql-extractrule\",\"description\":\"mysql-cloudwatch audit logs parser\",\"creator\":\"bot@coralogix.com\",\"enabled\":true,\"hidden\":false,\"rule_matchers\":[{\"subsystem_name\":{\"value\":\"mysql-cloudwatch\"}}],\"rule_subgroups\":[{\"id\":\"7a4770de-b2db-4e68-a891-68a43e9fea3c\",\"rules\":[{\"id\":\"d032de36-1dd2-410d-a992-fc150337df83\",\"name\":\"mysql-parse\",\"description\":\"mysql-parse\",\"source_field\":\"text\",\"parameters\":{\"parse_parameters\":{\"destination_field\":\"text\",\"rule\":\"(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)\"}},\"enabled\":true,\"order\":1}],\"enabled\":true,\"order\":1}],\"order\":39}"
    };
  }
  rpc DeleteRuleGroup(DeleteRuleGroupRequest) returns (DeleteRuleGroupResponse) {
    option (audit_log_description).description = "delete rule group";
    option (google.api.http) = {
      delete: "/api/v1/rulegroups/{group_id}"

      additional_bindings: {
        delete: "/v1/rulegroups/{group_id}"
      }
    };
    option (com.coralogix.openapi.v1.method) = {
      http_rule_index: 1
      resource: true
      description: "Deletes rule group by groupid"
    };
  }

  rpc BulkDeleteRuleGroup(BulkDeleteRuleGroupRequest) returns (BulkDeleteRuleGroupResponse) {
    option (audit_log_description).description = "bulk delete rule groups";
    option (google.api.http) = {
      delete: "/api/v1/rulegroups"
      body: "group_ids"
    };
  }

  rpc GetRuleGroupModelMapping(GetRuleGroupModelMappingRequest) returns (GetRuleGroupModelMappingResponse){
    option (audit_log_description).description = "get rule mapping";
    option (google.api.http) = {
      post: "/api/v1/rulegroup-mapping"
      body: "*"
    };
  }

  rpc GetCompanyUsageLimits(GetCompanyUsageLimitsRequest) returns (GetCompanyUsageLimitsResponse){
    option (audit_log_description).description = "get company usage with limits";
    option (google.api.http) = {
      post: "/api/v1/rulegroups/company-limits"
      body: "*"
    };
  }
}

// Request model for GetRuleGroup rpc
message GetRuleGroupRequest {
  // The group id
  string group_id = 1 [(com.coralogix.openapi.v1.field) = {
    required: true,
    format : "uuid",
    min_length : 36,
    max_length : 36,
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
    example: "\"3dc02998-0b50-4ea8-b68a-4779d716fa1f\""
  }];
}

// Response model for GetRuleGroup rpc
message GetRuleGroupResponse {
  // The rule group
  RuleGroup rule_group = 1;
}

// Request model for ListRuleGroups rpc
message ListRuleGroupsRequest {
  option (com.coralogix.openapi.v1.message) = {
    resource: true
  };
}

// Response model for ListRuleGroups rpc
message ListRuleGroupsResponse {
  option (com.coralogix.openapi.v1.message) = {
    name: "RuleGroupCollection"
  };
  // The rule groups
  repeated RuleGroup rule_groups = 1;
}

// Request model for CreateRuleGroup rpc
message CreateRuleGroupRequest {
  option (com.coralogix.openapi.v1.message) = {
    name: "RuleGroupPrototype"
  };

  // The name of the rule group
  google.protobuf.StringValue name = 1 [(com.coralogix.openapi.v1.field) = {
    required: true,
    min_length : 1,
    max_length : 255,
    example: "\"rule group\"",
  }];
  // A description for the rule group, should express what is the rule group purpose
  google.protobuf.StringValue description = 2 [(com.coralogix.openapi.v1.field) = {
    required: false,
    example: "\"Rule group to extract severity from logs\"",
  }];
  // Whether or not the rule is enabled
  google.protobuf.BoolValue enabled = 3 [(com.coralogix.openapi.v1.field) = {
    required: false
  }];
  // Not used
  google.protobuf.BoolValue hidden = 4 [(com.coralogix.openapi.v1.field) = {
    required: false,
    skip_in: [CLOUD_IBM]
  }, deprecated=true];
  // The creator of the rule group
  google.protobuf.StringValue creator = 5 [(com.coralogix.openapi.v1.field) = {
    required: false,
    example: "\"terraform-rules-creator\""
  }];
  // Optional rule matchers which if matched will make the rule go through the rule group
  repeated RuleMatcher rule_matchers = 6 [(com.coralogix.openapi.v1.field) = {
    required: false
  }];

  // A subgroup inside the rule group. Will try to run all the rules inside of it one after the other. If one rule didn't match, the whole rule subgroup won't match
  message CreateRuleSubgroup {
    // A rule to execute on the log, like time extract, regex extract, field dropping etc.
    message CreateRule {
      // Optional rule name
      google.protobuf.StringValue name = 1 [(com.coralogix.openapi.v1.field) = {
        required: false,
        example: "\"Extract Timestamp\""
      }];

      reserved "rule";
      reserved 2;

      // Optional description for the rule
      google.protobuf.StringValue description = 31 [(com.coralogix.openapi.v1.field) = {
        required: false,
        example: "\"Extract timestamp with ISO format for Mysql logs\""
      }];
      // The field on which to execute the rule
      google.protobuf.StringValue source_field = 4 [(com.coralogix.openapi.v1.field) = {
        required: true,
        example: "\"log_obj.date_time\""
      }];
      // Rule parameters which define how the rule will execute
      RuleParameters parameters = 5 [(com.coralogix.openapi.v1.field) = {
        required: true
      }];
      // Rule parameters which define how the rule will execute
      google.protobuf.BoolValue enabled = 6 [(com.coralogix.openapi.v1.field) = {
        required: true
      }];
      // The order in which the rule will execute inside the rule subgroup
      google.protobuf.UInt32Value order = 7  [(com.coralogix.openapi.v1.field) = {
        required: true
      }];
    }

    // Rules to run on the log
    repeated CreateRule rules = 1 [(com.coralogix.openapi.v1.field) = {
      required: true,
      min_items: 1
    }];

    // Whether or not the rule subgroup is enabled
    google.protobuf.BoolValue enabled = 2 [(com.coralogix.openapi.v1.field) = {
      required: false,
    }];
    // The ordering of the rule subgroup. Lower order will run first. 0 is considered as no value
    google.protobuf.UInt32Value order = 3 [(com.coralogix.openapi.v1.field) = {
      required: true
    }];
  }

  // Rule subgroups. Will try to execute the first rule subgroup, and if not matched will try to match the next one in order
  repeated CreateRuleSubgroup rule_subgroups = 7 [(com.coralogix.openapi.v1.field) = {
    required: true,
    min_items: 1
  }];
  // The order in which the rule group will be evaluated. The lower the order, the more priority the group will have. Not providing the order will by default create a group with the last order
  google.protobuf.UInt32Value order = 8 [(com.coralogix.openapi.v1.field) = {
    required: false,
  }];
  // Not used
  TeamId team_id = 9 [(com.coralogix.openapi.v1.field) = {
    required: false,
    skip_in: [CLOUD_IBM]
  }, deprecated=true];
}

// Response model for CreateRuleGroup rpc
message CreateRuleGroupResponse {
  // Rule group
  RuleGroup rule_group = 1;
}

// Request model for UpdateRuleGroup rpc
message UpdateRuleGroupRequest {
  // The group id
  google.protobuf.StringValue group_id = 1 [(com.coralogix.openapi.v1.field) = {
    required: true,
    format : "uuid",
    min_length : 36,
    max_length : 36,
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
    example: "\"3dc02998-0b50-4ea8-b68a-4779d716fa1f\""
  }];

  // The rule group to update
  CreateRuleGroupRequest rule_group = 2 [(com.coralogix.openapi.v1.field) = {
    required: true
  }];
}

// Response model for UpdateRuleGroup rpc
message UpdateRuleGroupResponse {
  // The rule group
  RuleGroup rule_group = 1;
}

// Request model for DeleteRuleGroup rpc
message DeleteRuleGroupRequest {
  // The group id
  string group_id = 1 [(com.coralogix.openapi.v1.field) = {
    required: true,
    format : "uuid",
    min_length : 36,
    max_length : 36,
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
    example: "\"3dc02998-0b50-4ea8-b68a-4779d716fa1f\""
  }];
}

// Response model for DeleteRuleGroup rpc
message DeleteRuleGroupResponse {
}

// Request model for BulkDeleteRuleGroup rpc
message BulkDeleteRuleGroupRequest {
  // The group ids to delete
  repeated string group_ids = 1 [(com.coralogix.openapi.v1.field) = {
    required: true,
    format : "uuid",
    min_length : 36,
    max_length : 36,
    min_items: 1,
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
    example: "\"3dc02998-0b50-4ea8-b68a-4779d716fa1f\""
  }];
}

// Response model for BulkDeleteRuleGroup rpc
message BulkDeleteRuleGroupResponse {
}

// Request model for GetRuleGroupModelMapping rpc
message GetRuleGroupModelMappingRequest {
  //  The rule group to get the model mapping for
  google.protobuf.StringValue name = 1 [(com.coralogix.openapi.v1.field) = {
    required: true,
    min_length : 1,
    max_length : 255,
    example: "\"rule group\"",
  }];
  // A description for the rule group, should express what is the rule group purpose
  google.protobuf.StringValue description = 2 [(com.coralogix.openapi.v1.field) = {
    required: false,
    example: "\"Rule group to extract severity from logs\"",
  }];
  // Whether or not the rule is enabled
  google.protobuf.BoolValue enabled = 3 [(com.coralogix.openapi.v1.field) = {
    required: false
  }];
  // Not used
  google.protobuf.BoolValue hidden = 4 [(com.coralogix.openapi.v1.field) = {
    required: false,
    skip_in: [CLOUD_IBM]
  }, deprecated=true];
  // The creator of the rule group
  google.protobuf.StringValue creator = 5 [(com.coralogix.openapi.v1.field) = {
    required: false,
    example: "\"terraform-rules-creator\""
  }];
  // Optional rule matchers which if matched will make the rule go through the rule group
  repeated RuleMatcher rule_matchers = 6;

  // A subgroup inside the rule group. Will try to run all the rules inside of it one after the other. If one rule didn't match, the whole rule subgroup won't match
  message CreateRuleSubgroup {
    message CreateRule {
      // Optional rule name
      google.protobuf.StringValue name = 1 [(com.coralogix.openapi.v1.field) = {
        required: false,
        example: "\"Extract Timestamp\""
      }];

      reserved "rule";
      reserved 2;

      // Optional description for the rule
      google.protobuf.StringValue description = 3 [(com.coralogix.openapi.v1.field) = {
        required: false,
        example: "\"Extract timestamp with ISO format for Mysql logs\""
      }];
      // The field on which to execute the rule
      google.protobuf.StringValue source_field = 4 [(com.coralogix.openapi.v1.field) = {
        required: true,
        example: "\"log_obj.date_time\""
      }];
      // Rule parameters which define how the rule will execute
      RuleParameters parameters = 5 [(com.coralogix.openapi.v1.field) = {
        required: true
      }];
      // Rule parameters which define how the rule will execute
      google.protobuf.BoolValue enabled = 6 [(com.coralogix.openapi.v1.field) = {
        required: true
      }];
      // The order in which the rule will execute inside the rule subgroup
      google.protobuf.UInt32Value order = 7 [(com.coralogix.openapi.v1.field) = {
        required: true
      }];
    }

    // Rules to run on the log
    repeated CreateRule rules = 1 [(com.coralogix.openapi.v1.field) = {
      required: true,
      min_items: 1
    }];
    // Whether or not the rule subgroup is enabled
    google.protobuf.BoolValue enabled = 2 [(com.coralogix.openapi.v1.field) = {
      required: false,
    }];
    // The ordering of the rule subgroup. Lower order will run first. 0 is considered as no value
    google.protobuf.UInt32Value order = 3 [(com.coralogix.openapi.v1.field) = {
      required: true
    }];
  }
  // Rule subgroups. Will try to execute the first rule subgroup, and if not matched will try to match the next one in order
  repeated CreateRuleSubgroup rule_subgroups = 7 [(com.coralogix.openapi.v1.field) = {
    required: true,
    min_items: 1
  }];
  // The order in which the rule group will be evaluated. The lower the order, the more priority the group will have. Not providing the order will by default create a group with the last order
  google.protobuf.UInt32Value order = 8 [(com.coralogix.openapi.v1.field) = {
    required: false,
  }];
}

// Response model for GetRuleGroupModelMapping rpc
message GetRuleGroupModelMappingResponse {
  // The create rule group request formatted as a json like object
  google.protobuf.Struct rule_definition = 1;
}

// Request model for GetCompanyUsageLimits rpc
message GetCompanyUsageLimitsRequest {
}

// Response model for GetCompanyUsageLimits rpc
message GetCompanyUsageLimitsResponse {
  message Counts {
    // Number of allowed rule groups
    google.protobuf.Int32Value parsing_themes = 1;
    // Number of allowed rule subgroups
    google.protobuf.Int32Value groups = 2;
    // Number of allowed rules
    google.protobuf.Int32Value rules = 3;
  }

  google.protobuf.StringValue company_id = 1 [(com.coralogix.openapi.v1.field) = {
    skip_in: [CLOUD_IBM]
  }, deprecated=true];
  // Defined limits for the account
  Counts limits = 2;
  // Account usage
  Counts usage = 3;
}